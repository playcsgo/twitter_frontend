{"version":3,"sources":["assets/images/icon/logo.svg","components/forms/InputGroup.jsx","api/twitter.js","assets/images/icon/alert-success-2.svg","assets/images/icon/alert-warning-2.svg","assets/images/icon/back.svg","components/basic/Header.jsx","api/admin.js","assets/images/icon/close.svg","api/userinfo.js","assets/images/icon/like-filled.svg","assets/images/icon/reply.svg","assets/images/icon/like.svg","assets/images/icon/addphoto.svg","components/basic/Modal.jsx","assets/images/icon/message.svg","assets/images/icon/notice.svg","assets/images/icon/post.svg","reportWebVitals.js","index.js"],"names":["InputGroup","baseUrl","axiosInstance","axios","create","interceptors","request","use","config","token","localStorage","getItem","headers","concat","error","console","FormData","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","_jsx","children","content"],"mappings":"+eAAe,I,MCkEAA,I,uBCjEf,MAAMC,EAAU,wCAEVC,EAAgBC,IAAMC,OAAO,CACjCH,QAASA,IAIXC,EAAcG,aAAaC,QAAQC,KAChCC,IAEC,MAAMC,EAAQC,aAAaC,QAAQ,aAInC,OAHIF,IACFD,EAAOI,QAAuB,cAAC,UAAAC,OAAaJ,IAEvCD,CAAM,IAEdM,IAECC,QAAQD,MAAMA,EAAM,I,kBCnBT,ICAA,I,wBCAA,ICSf,MCRMb,EAAU,wCAEVC,EAAgBC,IAAMC,OAAO,CACjCH,QAASA,IAIXC,EAAcG,aAAaC,QAAQC,KAChCC,IAEC,MAAMC,EAAQC,aAAaC,QAAQ,aAInC,OAHIF,IACFD,EAAOI,QAAuB,cAAC,UAAAC,OAAaJ,IAEvCD,CAAM,IAEdM,IAECC,QAAQD,MAAMA,EAAM,I,oBCnBT,ICEf,MAAMb,EAAU,wCAEVC,EAAgBC,IAAMC,OAAO,CACjCH,QAASA,IAIXC,EAAcG,aAAaC,QAAQC,KAChCC,IAEC,MAAMC,EAAQC,aAAaC,QAAQ,aAInC,OAHIF,IACFD,EAAOI,QAAuB,cAAC,UAAAC,OAAaJ,IAEvCD,CAAM,IAEdM,IAECC,QAAQD,MAAMA,EAAM,ICpBT,ICAA,ICAA,ICAA,ICyBE,IAAIE,SCzBN,ICAA,ICAA,ICYAC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,ECHWS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAIHC,cAAA,OAAAC,SACED,cAAA,QAAM,aAAW,UAAUE,QAAQ,0DAOvCjB,G","file":"static/js/main.e8439136.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.cd55da48.svg\";","import React, { useState } from 'react';\n\nconst InputGroup = ({\n  name,\n  label,\n  type,\n  placeholder,\n  errors,\n  register,\n  maxLength,\n  limitLabel = null,\n  // required,\n  validationSchema,\n  defaultValue,\n  watch,\n  // onChange,\n}) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    // console.log(e.target.value.length);\n    setInputValue(e.target.value.length);\n  };\n  return (\n    <>\n      {' '}\n      <div className='input_group'>\n        <label htmlFor={name}>{label}</label>\n        <input\n          id={name}\n          type={type}\n          name={name}\n          defaultValue={defaultValue}\n          placeholder={placeholder}\n          {...register(name, validationSchema)}\n          maxLength={maxLength || null}\n          className={errors[name] ? 'error' : ''}\n          onChange={handleInputChange}\n        />\n      </div>\n      <div className='error-message-group'>\n        {errors && errors[name]?.type === 'required' && (\n          <span className='error'>{errors[name]?.message}</span>\n        )}\n        {errors && errors[name]?.type === 'minLength' && (\n          <span className='error'>{errors[name]?.message}</span>\n        )}\n        {errors && errors[name]?.type === 'maxLength' && (\n          <span className='error'>{errors[name]?.message}</span>\n        )}\n        {errors && errors[name]?.type === 'pattern' && (\n          <span className='error'>{errors[name]?.message}</span>\n        )}\n\n        {inputValue > maxLength && <span className='error'>字數超出上限</span>}\n\n        {limitLabel === 'true' && (\n          <span className='limit-num'>\n            {watch(name) ? watch(name).length : '0'}/50\n          </span>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default InputGroup;\n","import axios from 'axios';\nconst baseUrl = 'https://twitter-qhht.onrender.com/api';\n\nconst axiosInstance = axios.create({\n  baseUrl: baseUrl,\n});\n\n// Add a request interceptor - 讓api把token帶入\naxiosInstance.interceptors.request.use(\n  (config) => {\n    // Do something before request is sent\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    // Do something with request error\n    console.error(error);\n  }\n);\n\n// ,  {\n//   headers: {\n//     'Content-Type': 'application/json',\n//     'Origin': 'https://leemengyun.github.io/'\n//   }}\n\n// ,{\n//       headers: {\n//         'Access-Control-Allow-Origin':'*',\n//         'Content-Type': 'application/json',\n//         'Access-Control-Allow-Methods': 'GET, PUT, POST, DELETE, OPTIONS',\n//         'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',\n//         'Accept': 'application/json',\n//       }\n//     }\n\nexport const getTweets = async () => {\n  try {\n    const res = await axiosInstance.get(`${baseUrl}/tweets`); //watch的屬性名作為path\n    //console.log(res.data[0].data)//{status: 'success', data: {…}}data: {tweets: Array(7)}status: \"success\"[[Prototype]]: Object\n    return res.data; //{tweets: Array(54)}\n  } catch (error) {\n    console.log('[Get Tweets failed]:', error);\n  }\n};\n\nexport const getTopUsers = async () => {\n  try {\n    const res = await axiosInstance.get(`${baseUrl}/users/top`);\n    return res.data;\n  } catch (error) {\n    console.log('[get topUser failed]:', error);\n  }\n};\n\nexport const getTweet = async (pathId) => {\n  try {\n    const res = await axiosInstance.get(`${baseUrl}/tweets/${pathId}`);\n    return res.data;\n  } catch (error) {\n    console.log('[Get Tweet Failed]: ', error);\n  }\n};\n\n//取得User的推文\nexport const getUserTweets = async (pathId) => {\n  try {\n    const res = await axiosInstance.get(`${baseUrl}/users/${pathId}/tweets`);\n    return res.data;\n  } catch (error) {\n    console.log('[Get UserTweets Failed!!]:', error);\n  }\n};\n//取得User Liked的推文\nexport const getUserLikedTweets = async (pathId) => {\n  try {\n    const res = await axiosInstance.get(`${baseUrl}/users/${pathId}/likes`);\n    // console.log(res);\n    return res.data;\n  } catch (error) {\n    console.log('[Get getUserLikedTweets Failed!!]:', error);\n  }\n};\n\n//取得User Replied的推文\nexport const getUserRepliedTweets = async (pathId) => {\n  try {\n    const res = await axiosInstance.get(\n      `${baseUrl}/users/${pathId}/replied_tweets`\n    );\n    return res.data;\n  } catch (error) {\n    console.log('[Get GetUserRepliedTweets Failed!!]:', error);\n  }\n};\n\n//新增 tweet\nexport const createTweet = async (payload) => {\n  try {\n    const { UserId, description } = payload;\n    const res = await axiosInstance.post(`${baseUrl}/tweets`, {\n      UserId,\n      description,\n    });\n    return res.data;\n  } catch (error) {\n    console.error('[CREATE a Tweet failed:]:', error);\n  }\n};\n\n//取得特定推文的所有回覆\nexport const getTweetReplies = async (pathId) => {\n  try {\n    const res = await axiosInstance.get(`${baseUrl}/tweets/${pathId}/replies`);\n    return res.data;\n  } catch (error) {}\n};\n\n//回覆貼文\nexport const repliedTweet = async (payload) => {\n  try {\n    const { UserId, TweetId, comment } = payload;\n    const res = await axiosInstance.post(\n      `${baseUrl}/tweets/${TweetId}/replies`,\n      {\n        UserId,\n        comment,\n      }\n    );\n    // console.log(res);\n    return res.data;\n  } catch (error) {\n    console.error('[Reply Tweet failed:]:', error);\n  }\n};\n\n//跟隨使用者\nexport const userFollowing = async (id) => {\n  try {\n    const res = await axiosInstance.post(`${baseUrl}/followships`, {\n      id,\n    });\n\n    // console.log(res);\n\n    return res.data;\n  } catch (error) {\n    console.error('[Following failed:]:', error);\n  }\n};\n//取消跟隨\nexport const cancelFollow = async (followingId) => {\n  try {\n    const res = await axiosInstance.delete(\n      `${baseUrl}/followships/${followingId}`\n    );\n    return res.data;\n  } catch (error) {\n    console.error('[Cancel Follow failed:]:', error);\n  }\n};\n\n//喜歡貼文\nexport const likeTweet = async (id) => {\n  try {\n    const res = await axiosInstance.post(`${baseUrl}/tweets/${id}/like`);\n\n    return res.data;\n  } catch (error) {\n    console.error('[Like Tweet failed:]:', error);\n  }\n};\n\n//取消喜歡貼文\nexport const unlikeTweet = async (id) => {\n  try {\n    const res = await axiosInstance.post(`${baseUrl}/tweets/${id}/unlike`);\n    return res.data;\n  } catch (error) {\n    console.error('[Unlike Tweet failed:]:', error);\n  }\n};\n\n//設定頁面取得用戶資訊\nexport const getSettingInfo = async (memberId) => {\n  try {\n    const res = await axiosInstance.get(`${baseUrl}/users/${memberId}`);\n    return res.data;\n  } catch (error) {\n    console.error('[Get USer Info failed:]:', error);\n  }\n};\n\n//修改用戶資訊\nexport const editSettingInfo = async (payload) => {\n  try {\n    const { memberId, name, account, email, password, checkPassword } = payload;\n    const res = await axiosInstance.patch(`${baseUrl}/users/${memberId}`, {\n      name,\n      account,\n      email,\n      password,\n      checkPassword,\n    });\n    return res;\n  } catch (error) {\n    const errorMessage = error.response.data;\n    console.error('[Edit Setting Info failed:]:', error);\n    return errorMessage;\n  }\n};\n\n//取的被跟隨者\nexport const getUserFollower = async (userId) => {\n  try {\n    const res = await axiosInstance.get(`${baseUrl}/users/${userId}/followers`);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//取的正在跟隨者\nexport const getUserFollowing = async (userId) => {\n  try {\n    const res = await axiosInstance.get(\n      `${baseUrl}/users/${userId}/followings`\n    );\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","export default __webpack_public_path__ + \"static/media/alert-success-2.c7bb216b.svg\";","export default __webpack_public_path__ + \"static/media/alert-warning-2.c524ac36.svg\";","export default __webpack_public_path__ + \"static/media/back.de35b2eb.svg\";","import React from 'react';\n// import { Link } from 'react-router-dom';\nimport { Route, useLocation, useNavigate, useParams } from 'react-router-dom';\nimport Skeleton from 'react-loading-skeleton';\nimport 'react-loading-skeleton/dist/skeleton.css';\n\n// import svg\nimport iconBack from '../../assets/images/icon/back.svg';\n\nconst HeaderMain = ({ pageTitle }) => {\n  return (\n    <div className='header-container header-main'>\n      <h5>{pageTitle}</h5>\n    </div>\n  );\n};\n\nconst HeaderUser = ({ userAccountName, userTweetsLength, isLoading }) => {\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"header-container\">\n      {/* <Link to='/main'> */}\n      <img\n        src={iconBack}\n        alt=\"Back to pre page\"\n        className=\"icon-back cursor-point\"\n        onClick={() => {\n          //@ 回上頁\n          navigate(-1);\n        }}\n      />\n      {/* </Link> */}\n\n      <div className=\"header-user-info\">\n        <h5>{userAccountName || <Skeleton />}</h5>\n        <p>{userTweetsLength} 推文 </p>\n      </div>\n    </div>\n  );\n};\n\nexport { HeaderMain, HeaderUser };\n","import axios from 'axios';\nconst baseUrl = 'https://twitter-qhht.onrender.com/api';\n\nconst axiosInstance = axios.create({\n  baseUrl: baseUrl,\n});\n\n// Add a request interceptor - 讓api把token帶入\naxiosInstance.interceptors.request.use(\n  (config) => {\n    // Do something before request is sent\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    // Do something with request error\n    console.error(error);\n  }\n);\n\n//@/api/admin/users\nexport const getAllUsers = async () => {\n  try {\n    const res = await axiosInstance.get(`${baseUrl}/admin/users`); //watch的屬性名作為path\n    // console.log(res.data);\n    return res.data;\n  } catch (error) {\n    console.log('[Get Admin Users failed]:', error);\n  }\n};\n\nexport const getAllTweets = async () => {\n  try {\n    const res = await axiosInstance.get(`${baseUrl}/admin/tweets`); //watch的屬性名作為path\n    //console.log(res.data[0].data)//{status: 'success', data: {…}}data: {tweets: Array(7)}status: \"success\"[[Prototype]]: Object\n    return res.data; //{tweets: Array(54)}\n  } catch (error) {\n    console.log('[Get Tweets failed]:', error);\n  }\n};\n\n//刪除tweet\n// export const cancelFollow = async (followingId) => {\nexport const deleteUserTweet = async (tweetId) => {\n  try {\n    const res = await axiosInstance.delete(\n      `${baseUrl}/admin/tweets/${tweetId}`\n    );\n    return res.data;\n  } catch (error) {\n    console.error('[Cancel Follow failed:]:', error);\n  }\n};\n","export default __webpack_public_path__ + \"static/media/close.8d623dc5.svg\";","import axios from 'axios';\n\nconst baseUrl = 'https://twitter-qhht.onrender.com/api';\n\nconst axiosInstance = axios.create({\n  baseUrl: baseUrl,\n});\n\n// Add a request interceptor - 讓api把token帶入\naxiosInstance.interceptors.request.use(\n  (config) => {\n    // Do something before request is sent\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    // Do something with request error\n    console.error(error);\n  }\n);\n\n//要記得export外面才能用\nexport const getUserInfo = async (pathId) => {\n  try {\n    // 獲得todo end point\n    // const res = await axios.get(`${baseUrl}/userinfo`);\n    const res = await axiosInstance.get(`${baseUrl}/users/${pathId}`);\n\n    //server 回傳的物件會包在data,所以一定要用.data才會拿到對的資料\n    // console.log(res.data.data);\n    // console.log(res)\n    return res.data;\n  } catch (error) {\n    console.error('[getUser Info failed]', error);\n  }\n};\n\n// 更新個人資料\nexport const updateUserInfo = async (payload) => {\n  try {\n    const {\n      id,\n      // data,\n      img,\n    } = payload;\n\n    const res = await axiosInstance.put(`${baseUrl}/users/${id}`, img);\n\n    return { success: true, ...res };\n    // return res.data;\n  } catch (error) {\n    const errorMessage = error.response.data;\n    console.error('[getUser Info failed]', error);\n    return { success: false, errorMessage: errorMessage };\n  }\n};\n\n// 更新個人資料-photo VERSION\nexport const updateUserPhoto = async (payload) => {\n  try {\n    const res = await axiosInstance.put(`${baseUrl}/users/74`, FormData);\n\n    //server 回傳的物件會包在data,所以一定要用.data才會拿到對的資料\n    // console.log('res data', res.data);\n    return res.data;\n  } catch (error) {\n    console.error('[getUser Info failed]', error);\n  }\n};\n","export default __webpack_public_path__ + \"static/media/like-filled.a23cc5e1.svg\";","export default __webpack_public_path__ + \"static/media/reply.1d9be076.svg\";","export default __webpack_public_path__ + \"static/media/like.81043da8.svg\";","export default __webpack_public_path__ + \"static/media/addphoto.2e797657.svg\";","import { useForm } from 'react-hook-form';\nimport { useRef, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// import component\nimport ModalContent from './ModalContent';\nimport UserAvatar from './UserAvatar';\nimport UserBk from './UserBk';\nimport InputGroup from '../forms/InputGroup';\nimport { ModalHeaderIcon } from './ModalHeader';\n\nimport { getUserInfo, updateUserInfo } from '../../api/userinfo';\nimport { useAuth } from '../../components/context/AuthContext';\nimport Swal from 'sweetalert2';\nimport 'sweetalert2/src/sweetalert2.scss';\n\n//import svg\nimport iconCamera from '../../assets/images/icon/addphoto.svg';\nimport iconClose from '../../assets/images/icon/close.svg';\nimport iconNotiSuccess from '../../assets/images/icon/alert-success-2.svg';\nimport iconNotiWanrning from '../../assets/images/icon/alert-warning-2.svg';\n\nconst defaultBk = 'https://i.imgur.com/ZFz8ZEI.png';\n// const defaultAvatar = 'https://i.imgur.com/V4RclNb.png';\n// @ 用來上傳更新自我資料用\nconst formData = new FormData();\n\nconst Modal = () => {\n  const { isAuthentic, member, setModalProOpen } = useAuth(); // 取出需要的狀態與方法\n  const [profile, setProfile] = useState({\n    name: '',\n    introduction: '',\n    avatar: '',\n    banner: '',\n  });\n  const [isUpdating, setIsupdating] = useState(false); //update-profile-loading狀態\n  const [isLoading, setIsLoading] = useState(false); //Profile-loading狀態\n  const navigate = useNavigate();\n  // 客製toast 元件\n  const ToastSuccess = Swal.mixin({\n    toast: true,\n    html: `<div>\n    <img src=\"${iconNotiSuccess}\" class=\"icon-alert-noti\"/>\n    </div>`,\n    showConfirmButton: false,\n    position: 'top',\n    width: '394px',\n    // height: '96px',\n    timer: 3000,\n    timerProgressBar: false,\n    showClass: {\n      popup: 'animate__animated animate__fadeInDown',\n    },\n    hideClass: {\n      popup: 'animate__animated animate__fadeOutUp',\n    },\n  });\n\n  const ToastWarning = Swal.mixin({\n    toast: true,\n    html: `<div>\n    <img src=\"${iconNotiWanrning}\" class=\"icon-alert-noti\"/>\n    </div>`,\n    showConfirmButton: false,\n    position: 'top',\n    width: '394px',\n    height: '96px',\n    timer: 3000,\n    timerProgressBar: false,\n    showClass: {\n      popup: 'animate__animated animate__fadeInDown',\n    },\n    hideClass: {\n      popup: 'animate__animated animate__fadeOutUp',\n    },\n  });\n\n  //@ upload photo用\n  const uploadedImage = useRef(null); // 預覽照片用\n  const imageUploader = useRef(null); // 拿到input file avatar狀態\n  const imageUploader_bk = useRef(null); // 拿到input file bk狀態\n  const [imageNewUrl, setImageNewUrl] = useState(''); //預覽後把取的avtar圖片存的變數\n  const [imageNewUrl_bk, setImageNewUrl_bk] = useState(''); //預覽後把取的bk圖片存的變數\n  const [imageChanging, setImageChanging] = useState(false);\n\n  // using react-form-hook-set-up\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n    watch,\n    setValue,\n  } = useForm({\n    defaultValues: {\n      name: profile.name,\n      introduction: profile.introduction,\n      avatar: profile.avatar,\n      banner: profile.banner,\n    },\n  });\n\n  // 打 /api/users/id\n  const getUserInfoAsync = async () => {\n    setIsLoading(true);\n    try {\n      const profile = await getUserInfo(member.id);\n      if (profile) {\n        setProfile(profile);\n        setImageNewUrl_bk(profile.banner);\n        setImageNewUrl(profile.avatar);\n        setIsLoading(false);\n      }\n    } catch (error) {\n      console.error('[getUser Info  with Async failed]', error);\n      setIsLoading(false);\n    }\n  };\n\n  //儲存form\n  const onSubmit = async (data) => {\n    try {\n      //@ 加入input值\n      if (formData.get('name')) {\n        formData.delete('name');\n      }\n      formData.append('name', data.name);\n\n      if (formData.get('introduction')) {\n        formData.delete('introduction');\n      }\n\n      formData.append('introduction', data.introduction);\n\n      setIsupdating(true);\n      const res = await updateUserInfo({\n        id: member.id,\n        // data: data,\n        img: formData,\n      });\n\n      if (res.status === 200) {\n        // console.log('SUCCESS!');\n        setModalProOpen(false);\n        setIsupdating(false);\n\n        ToastSuccess.fire({\n          title: '上傳照片成功!',\n        });\n      } else {\n        setModalProOpen(true);\n        ToastWarning.fire({\n          title: `圖檔不符合,請使用jpg/png/gif`,\n        });\n      }\n      for (var key of formData.keys()) {\n        // console.log(key);\n        formData.delete(key);\n      }\n    } catch (error) {\n      ToastWarning.fire({\n        title: `${error}`,\n      });\n    }\n  };\n\n  // @照片預覽+設定formData\n  const handleImageUpload = (e) => {\n    // console.log(e.target.className);\n\n    //@先設定formData拿input file avatar/bk的file\n    const avatarFile = imageUploader.current.files[0];\n    const bannerFile = imageUploader_bk.current.files[0];\n\n    // @預覽功能-先看是哪一個換圖(用className區分)\n    let curr_target = 'input-file-avatar';\n    if (e.target.className === 'input-file-bk') {\n      curr_target = 'input-file-bk';\n\n      // 以免重複存圖在formData，要清空formData,不然換幾次會多拿幾個檔案\n      if (formData.get('banner')) {\n        formData.delete('banner');\n      }\n      formData.append('banner', bannerFile);\n    } else {\n      // 以免重複存圖在formData，要清空formData,不然換幾次會多拿幾個檔案\n      if (formData.get('avatar')) {\n        formData.delete('avatar');\n      }\n      formData.append('avatar', avatarFile);\n    }\n\n    // @預覽功能-把圖換上去（這裡會把圖檔換轉base64）\n    const [file] = e.target.files;\n    if (file) {\n      const reader = new FileReader();\n      const { current } = uploadedImage;\n      current.file = file;\n      reader.onload = (e) => {\n        if (curr_target === 'input-file-avatar') {\n          //把imageUrl存下來\n          setImageNewUrl(e.target.result);\n          //利用空的input可以用 react-hook-form傳出去\n          // setValue('avatar', e.target.result);\n        } else if (curr_target === 'input-file-bk') {\n          //把imageUrl存下來\n          setImageNewUrl_bk(e.target.result);\n          setImageChanging(true);\n          //利用空的input可以用 react-hook-form傳出去\n          // setValue('banner', e.target.result);\n        }\n      };\n      // 照片在預覽的時候要讀取base64照片編碼的寫法\n      reader.readAsDataURL(file);\n    }\n  };\n\n  //照片換回原本背景照片\n  const handleImageDelete = (e) => {\n    // alert('換回原本背景照片');\n    setImageNewUrl_bk(profile.banner ? profile.banner : defaultBk);\n    //新設要送出的form value\n    setValue('banner', profile.banner ? profile.banner : defaultBk);\n    //取消按鈕隱藏\n    setImageChanging(false);\n  };\n\n  //@ 首次載入profile\n  useEffect(() => {\n    getUserInfoAsync();\n  }, []);\n\n  // @ 首次載入因profile 帳號出不來form要reset\n  useEffect(() => {\n    reset({ ...profile });\n  }, [profile, reset]);\n\n  useEffect(() => {\n    if (!isAuthentic) {\n      navigate('/login');\n    }\n  }, [navigate, isAuthentic]); //只要isAuthentic或navigation有變化便執行\n\n  return (\n    <>\n      <ModalContent>\n        <ModalHeaderIcon\n          setModalProOpen={setModalProOpen}\n          onSubmit={onSubmit}\n          isUpdating={isUpdating}\n        />\n        <div className='modal-content'>\n          <div className='profile-bk-wrapper'>\n            <UserBk bkUrl={imageNewUrl_bk} isLoading={isLoading} />\n            <img\n              alt='bk-camera'\n              src={iconCamera}\n              className='icon-camera'\n              ref={uploadedImage}\n              onClick={() => imageUploader_bk.current.click()}\n            />\n            {imageChanging && (\n              <img\n                src={iconClose}\n                alt='icon of close button'\n                className='icon-close'\n                onClick={handleImageDelete}\n              />\n            )}\n\n            <input\n              type='file'\n              accept='image/*'\n              onChange={handleImageUpload}\n              ref={imageUploader_bk}\n              className='input-file-bk'\n              //@ sam 需要的上傳規格 name='banner'\n              name='banner'\n              id='banner'\n            />\n          </div>\n\n          <div className='avatar-edit-wrapper'>\n            <UserAvatar avatar={imageNewUrl} isLoading={isLoading} />\n            <img\n              alt='bk-camera'\n              src={iconCamera}\n              className='icon-camera'\n              ref={uploadedImage}\n              onClick={() => imageUploader.current.click()}\n            />\n\n            <input\n              type='file'\n              accept='image/*'\n              onChange={handleImageUpload}\n              ref={imageUploader}\n              className='input-file-avatar'\n              //@ sam 需要的上傳規格 name='avatar'\n              name='avatar'\n              id='avatar'\n            />\n          </div>\n\n          <form\n            className='modal-info-form'\n            id='hook-form'\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <div className='input-group-container'>\n              <InputGroup\n                name='name'\n                label='名稱'\n                type='text'\n                placeholder='請輸入名稱'\n                // maxLength='50'\n                errors={errors}\n                register={register}\n                validationSchema={{\n                  required: '請輸入名稱',\n                  minLength: {\n                    value: 3,\n                    message: '請輸入至少3字',\n                  },\n                  maxLength: {\n                    value: 50,\n                    message: '最多不可輸入超過50字',\n                  },\n                }}\n                watch={watch}\n                limitLabel={true}\n              />\n            </div>\n            <div className='textarea-group-container'>\n              <div className='textarea-group grow-wrap'>\n                <label htmlFor='introduction'>自我介紹</label>\n                <textarea\n                  type='textarea'\n                  id='introduction'\n                  name='introduction'\n                  {...register('introduction', {\n                    required: true,\n                    maxLength: 160,\n                  })}\n                  placeholder='請輸入你的自我介紹'\n                  className={`desc-text-area ${\n                    errors.introduction ? 'error' : ''\n                  }`}\n                  // value={profile.introduction || ''}\n                />\n              </div>\n              <div className='error-message-group'>\n                {errors.introduction &&\n                  errors.introduction.type === 'required' && (\n                    <span className='error'>請輸入你的自我介紹</span>\n                  )}\n                {errors?.introduction?.type === 'maxLength' && (\n                  <span className='error'>最多不可輸入超過160字</span>\n                )}\n\n                <span className='limit-num'>\n                  {watch('introduction') ? watch('introduction').length : '0'}\n                  /160\n                </span>\n              </div>\n            </div>\n          </form>\n        </div>\n      </ModalContent>\n    </>\n  );\n};\n\nexport default Modal;\n","export default __webpack_public_path__ + \"static/media/message.4c9af58b.svg\";","export default __webpack_public_path__ + \"static/media/notice.60c0a6cc.svg\";","export default __webpack_public_path__ + \"static/media/post.38b40641.svg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>\n  <div>\n    <meta http-equiv=\"refresh\" content=\"0; url=https://playcsgo.github.io/coffee_frontend/\"></meta>\n  </div>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}